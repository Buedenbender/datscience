% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flex_caret_resample_metrics.R
\name{flex_resample_metrics}
\alias{flex_resample_metrics}
\title{Extracts Classification Metrics during CV in Caret and Creates a Table for Publication}
\usage{
flex_resample_metrics(ls, nod = 3, ...)
}
\arguments{
\item{ls}{A list containing the name of the algorithm as index, and the resamples
extracted from caret e.g.
\code{models <- list("Decision Tree" = decision_tree$resample,
          "KNN" = knn$resample))}}

\item{nod}{The number of decimals to show for each classification metric}

\item{...}{(Optional), Additional arguments. You have the option to determine
the metrics that shall be displayed by supplying a vector called
metrics, the default is \cr
\code{metrics = c("Accuracy","Mean_Balanced_Accuracy", "Kappa", "logLoss",
"Mean_Sensitivity", "Mean_Specificity" )}.
Furthermore you can determine the descriptive statistics that shall be
reported for each metrics. The default is
\code{descriptives = c("min", "mean", "max")}}
}
\value{
A \code{\link[flextable]{flextable}} object with APA ready table that
  displays the performance metrics obtained during training with cross-validation
}
\description{
A convenience function, that extracts desire classification metrics
  obtained during training (resampling, cross-validation), with caret,
  summarizes them (default min, mean, max, for more options see
  \code{\link[psych]{describe}}) and creates a
  \code{\link[flextable]{flextable}} object. The flextable is than formatted
  for publication with the \code{\link{format_flextable}} function.
  \if{html}{\figure{flex_resample_metrics.jpg}{Screenshot of example}}
}
\examples{
\dontrun{# Create Example Classifiers in the Iris Dataset
# set.seed(7)
# data(iris)
# Settings for the Cross-Validation
# control <- caret::trainControl(method="repeatedcv", number=10, repeats=3,
#                               summaryFunction = caret::multiClassSummary)
# Train Decision Tree
# suppressWarnings(
# decision_tree <- caret::train(Species~., data=iris, method="rpart",
#                                trControl=control, tuneLength=5)
# )
# Train k-Nearest Neighbors
# knn <-  caret::train(Species~., data=iris, method="knn",
#                     trControl=control, tuneLength=5)

# Create a list of objects
# models <- list("Decision Tree" = decision_tree$resample,
              "KNN" = knn$resample)

# Create table with performance metrics during training
# flex_resample_metrics(models)
}

}
\seealso{
\code{\link{format_flextable}},
\code{\link[flextable]{flextable}},
\code{\link[psych]{describe}}
}
\author{
Bjoern Buedenbender
}
